// Importing the express framework to build the web server
const express = require("express");

// Initializing the express application
const app = express();

// Loading environment variables from the .env file using the dotenv package
require("dotenv").config();

// Importing the CORS package to allow Cross-Origin Resource Sharing
const cors = require("cors");

// Importing axios for making HTTP requests
// const axios = require("axios");

// Retrieving the port number from environment variables
const port = process.env.PORT || 3000;  // Default to port 3000 if not set in .env

// Starting the server on the specified port and logging a message when it's running
app.listen(port, () => {
    console.log(`App is running at http://localhost:${port}`);
});

// Middleware to parse incoming JSON payloads
app.use(express.json());

// Middleware to parse URL-encoded data with extended option set to true for rich data parsing
app.use(express.urlencoded({ extended: true }));

// Enabling CORS to allow requests from different origins
app.use(cors());

// A GET route to respond with a simple HTML message when visiting the root URL
app.get("/", (req, res) => {
    res.send("<h1>MPesa Daraja Integration</h1>");
});

// Middleware function to generate a token after each transaction
const generateToken = async (req, res, next) => {
    const secret = process.env.MPESA_CONSUMER_SECRET;
    const consumer_key = process.env.MPESA_CONSUMER_KEY;

    // Creating base64 encoded string from consumer key and secret
    const auth = Buffer.from(`${consumer_key}:${secret}`).toString("base64");

    // Making a request to Safaricom's API to generate the OAuth token
    try {
        const { data } = await axios.get(
            "https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials",
            {
                headers: {
                    Authorization: `Basic ${auth}`,
                },
            }
        );
        console.log(data.access_token); // Safaricom returns 'access_token', not 'token'
        req.token = data.access_token;  // Store token in request object
        next();
    } catch (err) {
        console.error(err);
        res.status(400).json({ error: err.message });
    }
};

// Route to handle MPesa STK Push requests
app.post("/stk", generateToken, async (req, res) => {
    const phone = req.body.phone.substring(1); // Remove leading '0' from phone number
    const amount = req.body.amount;

    // Log the request parameters
    console.log({ phone, amount });

    // Generating a timestamp for the STK push
    const date = new Date(); // Create a new Date object
    const time_Stamp =
        date.getFullYear().toString() +
        ("0" + (date.getMonth() + 1)).slice(-2) +
        ("0" + date.getDate()).slice(-2) +
        ("0" + date.getHours()).slice(-2) +
        ("0" + date.getMinutes()).slice(-2) +  // Fixed to include minutes, as seconds would be less precise
        ("0" + date.getSeconds()).slice(-2);

    // Retrieving the MPesa business shortcode, passkey, and other necessary credentials from environment variables
    const shortcode = process.env.MPESA_TILL;
    const passkey = process.env.MPESA_PASSKEY;

    // Creating the base64 encoded password from the business shortcode, passkey, and timestamp
    const password = Buffer.from(shortcode + passkey + time_Stamp).toString("base64");

    // Making the STK push request to Safaricom's API
    try {
        const { data } = await axios.post(
            "https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest",
            {
                BusinessShortCode: shortcode,
                Password: password,
                Timestamp: time_Stamp,
                TransactionType: "CustomerPayBillOnline",
                Amount: amount,
                PartyA: `254${phone}`,  // Full phone number with country code
                PartyB: shortcode,  // Business shortcode
                PhoneNumber: `254${phone}`,  // Full phone number with country code
                CallBackURL: "https://mydomain.com/pat",  // Callback URL for handling the transaction status
                AccountReference: `254${phone}`,  // Using phone number as account reference
                TransactionDesc: "Test",  // Description of the transaction
            },
            {
                headers: {
                    Authorization: `Bearer ${req.token}`,  // Use the token generated by the middleware
                },
            }
        );
        console.log(data);
        res.status(200).json(data);  // Respond with the data received from Safaricom
    } catch (err) {
        console.error(err.message);
        res.status(400).json({ error: err.message });  // Handle errors and send the error message as a response
    }
});